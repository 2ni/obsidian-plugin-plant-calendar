/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PlantCalendarPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var parseMonths = (input) => {
  let result = [];
  const ranges = input.split(",");
  const filterHalfMonth = (start, end, result2) => {
    if (start.startsWith(".")) {
      result2[0] = "x";
    }
    if (start.endsWith(".")) {
      result2[1] = "x";
    }
    if (end.startsWith(".")) {
      result2[result2.length - 2] = "x";
    }
    if (end.endsWith(".")) {
      result2[result2.length - 1] = "x";
    }
    return result2.filter((v) => typeof v != "string");
  };
  for (const range of ranges) {
    if (range.includes("-")) {
      const [start, end] = range.replace(/\./g, "").split("-").map(Number);
      const [startOrig, endOrig] = range.split("-");
      const resultTemp = [];
      for (let i = start; i <= end; i++) {
        resultTemp.push(i * 2 - 1, i * 2);
      }
      result = [...result, ...filterHalfMonth(startOrig, endOrig, resultTemp)];
    } else {
      const month = Number(range.replace(".", ""));
      if (range.startsWith(".") || !range.includes(".")) {
        result.push(month * 2);
      }
      if (range.endsWith(".") || !range.includes(".")) {
        result.push(month * 2 - 1);
      }
    }
  }
  return result.sort((a, b) => a - b);
};
var PlantCalendarPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "plantcalendar-add",
      name: "Add a calendar",
      editorCallback: (editor, view) => {
        editor.replaceRange("```plantcalendar\nAubergine\nAnzucht:2-3\nGew\xE4chshaus:.4,5,6\nFreiland:.5-7\nErnte:8-10\n```", editor.getCursor());
      }
    });
    this.registerMarkdownCodeBlockProcessor("plantcalendar", (source, el, ctx) => {
      const month = ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"];
      const plants = {};
      const rows = source.split("\n");
      const table = el.createEl("table", { cls: "plantcalendar" });
      let monthShown = false;
      rows.forEach((row) => {
        if (!row.match(":[ .,0-9-]*$")) {
          if (monthShown) {
            table.createEl("tr", { cls: "spacer" }).createEl("td", { attr: { colspan: "25" } });
          }
          let tableRow = table.createEl("tr");
          let labelCell = tableRow.createEl("th");
          import_obsidian.MarkdownRenderer.renderMarkdown(row, labelCell, "", this);
          if (!monthShown) {
            monthShown = true;
            for (let i = 0; i < 12; i++) {
              tableRow.createEl("th", { text: month[i], attr: { colspan: "2" } });
            }
          }
        } else {
          let [label, highlights] = row.split(":");
          let tableRow = table.createEl("tr", { cls: label.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/ /g, "-") });
          highlights = parseMonths(highlights.replace(/ /g, ""));
          tableRow.createEl("td", { text: label });
          for (let i = 0; i < 24; i++) {
            tableRow.createEl("td", { text: highlights.includes(i + 1) ? "x" : "", cls: highlights.includes(i + 1) ? "highlight" : "" });
          }
        }
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
